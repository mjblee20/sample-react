{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","users","setUsers","username","setUsername","email","setEmail","useEffect","axios","get","then","catch","err","console","log","length","map","user","index","key","name","onSubmit","post","alert","window","location","reload","onChange","e","target","value","type","placeholder","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uPAqGeA,EA9DH,WAAa,IAAD,EACIC,mBAAS,MADb,mBACfC,EADe,KACRC,EADQ,OAGUF,mBAAS,IAHnB,mBAGfG,EAHe,KAGLC,EAHK,OAIIJ,mBAAS,IAJb,mBAIfK,EAJe,KAIRC,EAJQ,KAkCtB,OA7BAC,qBAAU,WACRC,IACGC,IAAI,cACJC,MAAK,SAACT,GAAD,OAAWC,EAASD,MACzBU,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,QAC7B,IAyBD,oCACE,0CACW,OAAVX,EACC,yCACmB,IAAjBA,EAAMc,OACR,gDAEA,oCACE,+CACA,4BACGd,EAAMe,KAAI,SAACC,EAAMC,GAAP,OACT,wBAAIC,IAAKD,GAAT,SACSD,EAAKG,KADd,aAC8BH,EAAKZ,YAO3C,0BAAMgB,SA1CV,WACmB,KAAblB,EAIU,KAAVE,EAIJG,IACGc,KAAK,aAAc,CAClBnB,SAAUA,EACVE,MAAOA,IAERK,MAAK,WACJa,MAAM,gCACNC,OAAOC,SAASC,YAEjBf,OAAM,WACLY,MAAM,gDAbRA,MAAM,+BAJNA,MAAM,oCAyCJ,2BAAOI,SAAU,SAACC,GAAD,OAAOxB,EAAYwB,EAAEC,OAAOC,QAAQC,KAAK,OAAOC,YAAY,wBAC7E,2BAAOL,SAAU,SAACC,GAAD,OAAOtB,EAASsB,EAAEC,OAAOC,QAAQC,KAAK,OAAOC,YAAY,6BAC1E,2BAAOD,KAAK,cCpFAE,QACW,cAA7BT,OAAOC,SAASS,UAEe,UAA7BV,OAAOC,SAASS,UAEhBV,OAAOC,SAASS,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.dc894402.chunk.js","sourcesContent":["// import React from 'react';\n// import { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\n\n// import Home from './pages/Home';\n// import Design from './pages/Design';\n// import Projects from './pages/Projects';\n// import Algo from './pages/Algorithms';\n// import User from './components/User';\n// function App() {\n//   return (\n//     <Router>\n//       {/* NavBar */}\n//       <Switch>\n//         <Route path='/home'>\n//           <Home />\n//         </Route>\n//         <Route path='/design'>\n//           <Design />\n//         </Route>\n//         <Route path='/algo'>\n//           <Algo />\n//         </Route>\n//         <Route path='/projects'>\n//           <Projects />\n//         </Route>\n//         <Route path='/user'>\n//           <User />\n//         </Route>\n//         <Redirect to='/home' />\n//       </Switch>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst App = function () {\n  const [users, setUsers] = useState(null);\n\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  useEffect(() => {\n    axios\n      .get('/api/users')\n      .then((users) => setUsers(users))\n      .catch((err) => console.log(err));\n  }, []);\n\n  function submitForm() {\n    if (username === '') {\n      alert('Please fill the username field');\n      return;\n    }\n    if (email === '') {\n      alert('Please fill the email field');\n      return;\n    }\n    axios\n      .post('/api/users', {\n        username: username,\n        email: email,\n      })\n      .then(function () {\n        alert('Account created successfully');\n        window.location.reload();\n      })\n      .catch(function () {\n        alert('Could not creat account. Please try again');\n      });\n  }\n  return (\n    <>\n      <h1>My Project</h1>\n      {users === null ? (\n        <p>Loading...</p>\n      ) : users.length === 0 ? (\n        <p>No user available</p>\n      ) : (\n        <>\n          <h2>Available Users</h2>\n          <ol>\n            {users.map((user, index) => (\n              <li key={index}>\n                Name: {user.name} - Email: {user.email}\n              </li>\n            ))}\n          </ol>\n        </>\n      )}\n\n      <form onSubmit={submitForm}>\n        <input onChange={(e) => setUsername(e.target.value)} type='text' placeholder='Enter your username' />\n        <input onChange={(e) => setEmail(e.target.value)} type='text' placeholder='Enter your email address' />\n        <input type='submit' />\n      </form>\n    </>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}